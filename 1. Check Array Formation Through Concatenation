//Approach 1
class Solution {
    public boolean canFormArray(int[] arr, int[][] pieces) {
        Map<Integer, int[]> map = new HashMap<>();
        for(int[] n : pieces) {
            map.put(n[0], n);
        }
        int i = 0;
        for(; i < arr.length; i++) {
            if(map.containsKey(arr[i])) {
                  int[] piece = map.get(arr[i]);
                  for(int n : piece){
                      if(arr[i] == n) i++;
                      else return false;
                  }
            }
            else {
                return false;
            }
            i--;
        }
        return true;
    }
}

//Approach 2

class Solution {
    public boolean canFormArray(int[] arr, int[][] pieces) {
        int n = arr.length;
        int[] ind = new int[101];
        for(int i = 0; i < arr.length; i++) {
            ind[arr[i]] = i+1;
        }
        
        for(int[] piece : pieces) {
            if(ind[piece[0]] == 0) return false;
            for(int i = 1; i < piece.length; i++) {
                if(ind[piece[i]] - ind[piece[i-1]] != 1) return false;
            }
        }
        
        return true;
    }
}   
